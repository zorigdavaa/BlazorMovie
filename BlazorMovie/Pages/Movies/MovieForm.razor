@inject IPersonRepository personRepo

<EditForm OnValidSubmit="OnDataAnnotationValidated" Model="Movie">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Title"></InputText>
            <ValidationMessage For="@(()=>Movie.Title)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>In Theaters</label>
        <div>
            <InputCheckbox @bind-Value="Movie.InTheaters"></InputCheckbox>
            <ValidationMessage For="@(()=>Movie.InTheaters)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Trailer"></InputText>
            <ValidationMessage For="@(()=>Movie.Trailer)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Release Date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="Movie.ReleaseDate"></InputDate>

            <ValidationMessage For="@(()=>Movie.Trailer)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <InputImage Label="Picture" OnSelectedImage="OnSelectedImage" imageURL="@imageURl" />
    </div>
    <div class="form-group form-markdown">
        <InputMarkDown @bind-Value="Movie.Summary" For="@(()=>Movie.Summary)" Label="Summary"></InputMarkDown>
    </div>
    <div class="form-group">
        <label>Genre:</label>
        <MultipleSelector Selected="Selected" NoSelected="NoSelected"></MultipleSelector>
    </div>
    <div class="form-group">
        <label>Actors:</label>
        <MultipleSelectorTypeAhead Context="person" SearchMethod="SearchMethod" SelectedElements="SelectedActor">
            <MyResultTemplate>
                <img style="width:50px" src="@person.Picture" />
                @person.Name
            </MyResultTemplate>
            <MyListTemplate>
                @person.Name / <input type="text" placeholder="Character" @bind="person.Character" />
            </MyListTemplate>
        </MultipleSelectorTypeAhead>
    </div>


    <button type="submit" class="btn btn-primary" style="margin-bottom:20px">Save</button>

</EditForm>

@code {
    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genre> SelectedGenre { get; set; } = new List<Genre>();
    [Parameter] public List<Genre> NotSelectedGenre { get; set; } = new List<Genre>();
    [Parameter] public List<Person> SelectedActor { get; set; } = new List<Person>();


    private List<MultipleSelectorModel> Selected { get; set; } = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NoSelected { get; set; } = new List<MultipleSelectorModel>();
    private string imageURl;
    protected override void OnParametersSet()
    {
        Selected = SelectedGenre.Select(x => new MultipleSelectorModel { Key = x.Id.ToString(), Value = x.Name }).ToList();
        NoSelected = NotSelectedGenre.Select(x => new MultipleSelectorModel { Key = x.Id.ToString(), Value = x.Name }).ToList();
        imageURl = Movie.Poster;
        Movie.Poster = null;
    }

    //protected override void OnInitialized()
    //{
    //    Selected = SelectedGenre.Select(x => new MultipleSelectorModel { Key = x.Id.ToString(), Value = x.Name }).ToList();
    //    NoSelected = NotSelectedGenre.Select(x => new MultipleSelectorModel { Key = x.Id.ToString(), Value = x.Name }).ToList();
    //    imageURl = Movie.Poster;
    //    Movie.Poster = null;
    //}
    void OnSelectedImage(string imageBase64)
    {
        Movie.Poster = imageBase64;
        imageURl = null;
    }
    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        return await personRepo.GetPeopleByName(searchText);
    }
    private async Task OnDataAnnotationValidated()
    {
        Movie.MovieGenres = Selected.Select(x => new MovieGenres { GenreId = int.Parse(x.Key) }).ToList();
        Movie.MoviesActors = SelectedActor.Select(x => new MoviesActors { PersonId = x.Id, Character = x.Character }).ToList();

        if (!string.IsNullOrWhiteSpace(Movie.Poster)) { imageURl = null; }
        await OnValidSubmit.InvokeAsync(null);
    }


}
