@page "/People"
@inject IPersonRepository personRepo


<h3>PeopleIndex</h3>
<div>
    <a href="People/CreatePerson" class="btn btn-primary">Create Person</a>
</div>
<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages" 
             SelectedPage="SelectedPage"></Pagination>

<GenericList List="People">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <td></td>
                    <td>Name</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in People)
                {
                <tr>
                    <td>@person.Name</td>
                    <td>
                        <a class="btn btn-primary" href="/person/edit/@person.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(()=>DeletePerson(person.Id))">Delete</button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>

@code { 
    public List<Person> People { get; set; }
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;


    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();

        //People= await personRepo.GetPeople(); deprecated due to pagination
    }
    private async Task LoadPeople()
    {
        var paginatedResponse = await personRepo.GetPeople(paginationDTO);
        People = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadPeople();
    }

    protected async Task DeletePerson(int Id)
    {
        await personRepo.DeletePerson(Id);
        await LoadPeople();
    }
}
