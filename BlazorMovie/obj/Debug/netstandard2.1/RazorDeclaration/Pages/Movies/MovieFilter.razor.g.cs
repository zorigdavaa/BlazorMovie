#pragma checksum "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\Pages\Movies\MovieFilter.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "879587c903e30baf5bfd90571dec8a2ee8cda646"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorMovie.Pages.Movies
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Shared.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Shared.DTO_s;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\_Imports.razor"
using BlazorMovie.Pages.Movies;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/movies/search")]
    public partial class MovieFilter : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 45 "E:\Visual studio repos\UdemyCourseRepo\Blazor Tutorial\BlazorMovie\BlazorMovie\Pages\Movies\MovieFilter.razor"
       
    #region Properties
    List<Movie> Movies;
    List<Genre> Genres = new List<Genre>();
    FilterMovieDTO filterMovieDTO = new FilterMovieDTO();
    int totalAmountPages;
    #endregion

    protected async Task SelectedPage(int page)
    {
        filterMovieDTO.Page = page;
        await LoadMovies();
    }

    protected async Task SearchForMovies()
    {
        await LoadMovies();
    }

    protected async Task Clear()
    {
        filterMovieDTO.TItle = "";
        filterMovieDTO.GenreId = 0;
        filterMovieDTO.UpcomingReleases = false;
        filterMovieDTO.InTheaters = false;
        await LoadMovies();

    }
    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadMovies();
        }

    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryString)
    {
        if (queryString.ContainsKey("genreId"))
        {
            filterMovieDTO.GenreId = int.Parse(queryString["genreId"]);
        }
        if (queryString.ContainsKey("title"))
        {
            filterMovieDTO.TItle = queryString["title"];
        }
        if (queryString.ContainsKey("genreId"))
        {
            filterMovieDTO.GenreId = int.Parse(queryString["genreId"]);
        }
        if (queryString.ContainsKey("intheaters"))
        {
            filterMovieDTO.UpcomingReleases = bool.Parse(queryString["intheaters"]);
        }
        if (queryString.ContainsKey("upcomingReleases"))
        {
            filterMovieDTO.UpcomingReleases = bool.Parse(queryString["upcomingReleases"]);
        }
        if (queryString.ContainsKey("page"))
        {
            filterMovieDTO.GenreId = int.Parse(queryString["page"]);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var queryStrings = navMan.GetQueryStrings(navMan.Uri);
        Genres = await genreRepo.GetGenres();
        if (queryStrings!=null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }
            await LoadMovies();
    }

    protected async Task LoadMovies()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navMan.NavigateTo("/movies/search" + queryString);
        }

        var paginatedResponse = await movieRepo.GetMoviesFiltered(filterMovieDTO);
        Movies = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }
    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = filterMovieDTO.GenreId.ToString();
        queryStringsDict["title"] = filterMovieDTO.TItle ?? "";
        queryStringsDict["intheaters"] = filterMovieDTO.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = filterMovieDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = filterMovieDTO.Page.ToString();

        //genreid=4&title=spider

        var defaultValue = new List<string> { "false", "", "0" };
        return string.Join("&", queryStringsDict
            .Where(x => !defaultValue.Contains(x.Value.ToLowerInvariant()))
            .Select(x=>$"{x.Key}={System.Web.HttpUtility.UrlEncode( x.Value)}"));
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navMan { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IGenreRepository genreRepo { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMovieRepository movieRepo { get; set; }
    }
}
#pragma warning restore 1591
